apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.code.arctouch.arctouchcodechallenge'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
        release {
            minifyEnabled true
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }
    }

    flavorDimensions "default"

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mockFake {
            dimension "default"
            applicationIdSuffix = ".mockFake"
        }
        mockNetSimulation {
            dimension "default"
            applicationIdSuffix = ".mockNetSimulation"
        }
        prod {
            dimension "default"
        }
    }

    // Remove mockRelease as it's not needed.
    android.variantFilter { variant ->
        if (variant.buildType.name == 'release'
                && ((variant.getFlavors().get(0).name == 'mockFake') || variant.getFlavors().get(0).name == 'mockNetSimulation')) {
            variant.setIgnore(true)
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:27.0.1'
    implementation 'com.android.support:design:27.0.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    // Room
    compile "android.arch.persistence.room:runtime:$rootProject.roomVersion"
    annotationProcessor "android.arch.persistence.room:compiler:$rootProject.roomVersion"
    androidTestCompile "android.arch.persistence.room:testing:$rootProject.roomVersion"
    // Guava
    compile "com.google.guava:guava:$rootProject.guavaVersion"
    // Espresso UI Testing
    compile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestCompile "com.android.support.test.espresso.idling:idling-concurrent:$rootProject.espressoVersion"

    compile "org.apache.commons:commons-lang3:$rootProject.apacheCommonsVersion"

    compileOnly "org.yamj:api-common:$rootProject.yamjVersion"

//    compile "com.fasterxml.jackson.core:jackson-core:$rootProject.fasterXMLVersion"
//    compile "com.fasterxml.jackson.core:jackson-annotations:$rootProject.fasterXMLVersion"
    compile "com.fasterxml.jackson.core:jackson-databind:$rootProject.fasterXMLVersion"

    compile "org.slf4j:jcl-over-slf4j:$rootProject.slf4jVersion"
    compile "com.squareup.picasso:picasso:$rootProject.picassoVersion"
    compile "com.google.code.gson:gson:$rootProject.gsonVersion"
//    compile "commons-codec:commons-codec:$rootProject.commonsCodecVersion"
}
